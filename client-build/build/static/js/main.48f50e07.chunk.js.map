{"version":3,"sources":["glitch/index.tsx","index.tsx"],"names":["c","chance","Chance","colorThemes","C","canvasElementRef","useRef","useEffect","current","actuallyStop","canvasElement","drawFrames","lastDrawTimestamp","Date","now","maxFrameRate","integer","min","max","whiteLines","bool","lineRate","floating","randomColors","length","width","clientWidth","height","clientHeight","ctx","getContext","Error","squareWidth","squareHeight","drawRandomGlitchySquares","window","requestAnimationFrame","yOffset","Math","random","fillStyle","fillRect","xOffset","pickone","glitchAway","id","ref","Root","useState","glitchKey","setGlitchKey","StrictMode","href","target","rel","src","onClick","ReactDOM","render","document","getElementById"],"mappings":"uMAEMA,EAAIC,IAAOC,SAEXC,EAAc,CAChB,CAAC,OAAQ,QACT,CAAC,MAAO,QAAS,QACjB,CAAC,OAAQ,QACT,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YA6ExDC,EAjBL,WAEN,IAAMC,EAAmBC,iBAAiC,MAS1D,OAPAC,qBAAU,WACN,GAAiC,OAA7BF,EAAiBG,QAArB,CACA,IAAMC,EA/DK,SAACC,GAEhB,IAAIC,GAAa,EACbC,EAAoBC,KAAKC,MACvBC,EAAe,IAAOf,EAAEgB,QAAQ,CAAEC,IAAK,EAAGC,IAAK,KAK/CC,EAAanB,EAAEoB,OACfC,EAAWrB,EAAEsB,SAAS,CAACL,IAAK,GAAKC,IAAK,KACtCK,EAAepB,EAAYH,EAAEgB,QAAQ,CAAEC,IAAK,EAAGC,IAAKf,EAAYqB,OAAS,KAEzEC,EAAQf,EAAcgB,YACtBC,EAASjB,EAAckB,aAE7BlB,EAAce,MAAQA,EACtBf,EAAciB,OAASA,EACvB,IAAME,EAAMnB,EAAcoB,WAAW,MACrC,IAAKD,EAAK,MAAM,IAAIE,MAAM,eAC1B,IAAMC,EAAcP,EAAQ,IACtBQ,EAAeD,EAiCrB,OA9BiC,SAA3BE,IACF,IAAMpB,EAAMD,KAAKC,MAGjB,GAFkBA,EAAMF,EAERG,EACZoB,OAAOC,sBAAsBF,QAGjC,IAAmB,IAAfvB,EAAJ,CAEAC,EAAoBE,EAGpB,IAAK,IAAIuB,EAAU,EAAGA,EAAUV,EAAQU,GAAWJ,EAC/C,GAAIK,KAAKC,SAAWlB,EACZF,IACAU,EAAIW,UAAY,QAChBX,EAAIY,SAAS,EAAGJ,EAASZ,EAAOE,SAIxC,IAAK,IAAIe,EAAU,EAAGA,EAAUjB,EAAOiB,GAAWV,EAE9CH,EAAIW,UAAYxC,EAAE2C,QAAQpB,GAC1BM,EAAIY,SAASC,EAASL,EAASL,EAAaC,GAGpDE,OAAOC,sBAAsBF,IAEjCA,GAhDgB,WACZvB,GAAa,GAyDQiC,CAAWvC,EAAiBG,SACjD,OAAO,kBAAMC,QACd,IAIC,wBAAQoC,GAAG,gBAAgBC,IAAKzC,KC1ElC0C,EAAO,WACX,MAAkCC,mBAASV,KAAKC,UAAhD,mBAAOU,EAAP,KAAkBC,EAAlB,KACA,OACE,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,GAAmBF,GACnB,gCACE,mBAAGG,KAAK,2BAA2BC,OAAO,SAASC,IAAI,aAAvD,SAAoE,8CACpE,qBAAKC,IAAI,WAAWC,QAAS,kBAAMN,EAAaZ,KAAKC,gBAEvD,+BACE,qBAAKgB,IAAI,uFAOjBE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.48f50e07.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport chance from \"chance\";\nconst c = chance.Chance();\n\nconst colorThemes = [\n    [\"#000\", \"#fff\"],\n    [\"red\", \"green\", \"blue\"],\n    [\"#777\", \"blue\"],\n    [\"#e619b2\", \"#0cf3b5\", \"#ff2e00\", \"#8ded12\", \"#0a0e7d\", \"#aaaba8\", \"#ff1d00\"]\n];\n\nconst glitchAway = (canvasElement: HTMLCanvasElement) => {\n\n    let drawFrames = true;\n    let lastDrawTimestamp = Date.now();\n    const maxFrameRate = 1000 / c.integer({ min: 5, max: 30 });\n    const turnOff = () => {\n        drawFrames = false;\n    };\n\n    const whiteLines = c.bool();\n    const lineRate = c.floating({min: 0.1, max: 0.9});\n    const randomColors = colorThemes[c.integer({ min: 0, max: colorThemes.length - 1 })];\n\n    const width = canvasElement.clientWidth;\n    const height = canvasElement.clientHeight;\n\n    canvasElement.width = width;\n    canvasElement.height = height;\n    const ctx = canvasElement.getContext(\"2d\");\n    if (!ctx) throw new Error(\"No context?\");\n    const squareWidth = width / 300;\n    const squareHeight = squareWidth;\n    // For drawing:\n\n    const drawRandomGlitchySquares = () => {\n        const now = Date.now();\n        const timeSince = now - lastDrawTimestamp;\n\n        if (timeSince < maxFrameRate) {\n            window.requestAnimationFrame(drawRandomGlitchySquares);\n            return;\n        }\n        if (drawFrames === false) return;\n\n        lastDrawTimestamp = now;\n\n\n        for (let yOffset = 0; yOffset < height; yOffset += squareHeight) {\n            if (Math.random() > lineRate) {\n                if (whiteLines) {\n                    ctx.fillStyle = \"white\";\n                    ctx.fillRect(0, yOffset, width, height);\n                }\n                continue;\n            };\n            for (let xOffset = 0; xOffset < width; xOffset += squareWidth) {\n\n                ctx.fillStyle = c.pickone(randomColors);\n                ctx.fillRect(xOffset, yOffset, squareWidth, squareHeight);\n            }\n        }\n        window.requestAnimationFrame(drawRandomGlitchySquares);\n    };\n    drawRandomGlitchySquares();\n    return turnOff;\n};\n\nconst C = () => {\n\n    const canvasElementRef = useRef<HTMLCanvasElement | null>(null);\n\n    useEffect(() => {\n        if (canvasElementRef.current === null) return;\n        const actuallyStop = glitchAway(canvasElementRef.current);\n        return () => actuallyStop();\n    }, []);\n\n\n    return (\n        <canvas id=\"glitch-canvas\" ref={canvasElementRef}></canvas>\n    );\n\n};\n\nexport default C;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GlitchCanvas from \"./glitch/index\";\n\nconst Root = () => {\n  const [glitchKey, setGlitchKey] = useState(Math.random());\n  return (\n    <React.StrictMode>\n      <GlitchCanvas key={glitchKey} />\n      <nav>\n        <a href=\"https://twitch.tv/joe_js\" target=\"_blank\" rel=\"noreferrer\"><h1>ttv/joe_js</h1></a>\n        <img src=\"prof.jpg\" onClick={() => setGlitchKey(Math.random())} />\n      </nav>\n      <main>\n        <img src=\"https://i.pinimg.com/originals/eb/1b/27/eb1b27863813653543914d222ceb9cd0.gif\" />\n      </main>\n    </React.StrictMode>\n  );\n\n};\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}